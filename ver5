<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Classification Model</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', Arial, sans-serif;
            text-align: center;
            margin-top: 50px;
        }
        #label-container div {
            margin: 5px 0;
            font-size: 1rem;
        }
        #main-sound-source {
            font-size: 1.2rem;
            font-weight: bold;
            margin-top: 20px;
        }
        button {
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
        }
    </style>
</head>
<body>

<div>Audio Classification Model</div>
<button type="button" onclick="init()">Start</button>
<div id="label-container"></div>
<div id="main-sound-source">Main sound source: N/A</div>
<button type="button" onclick="downloadCSV()">Download CSV</button>

<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands@0.4.0/dist/speech-commands.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

<script type="text/javascript">
    const URL = "https://teachablemachine.withgoogle.com/models/BAxc_3uIG/";
    const csvData = [["Timestamp", "Main Sound Source"]]; // Initialize CSV data array with headers

    async function createModel() {
        const checkpointURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        const recognizer = speechCommands.create(
            "BROWSER_FFT",
            undefined,
            checkpointURL,
            metadataURL
        );

        await recognizer.ensureModelLoaded();
        return recognizer;
    }

    async function init() {
        const recognizer = await createModel();
        const classLabels = recognizer.wordLabels();
        const labelContainer = document.getElementById("label-container");
        const mainSoundSource = document.getElementById("main-sound-source");

        for (let i = 0; i < classLabels.length; i++) {
            labelContainer.appendChild(document.createElement("div"));
        }

        recognizer.listen(result => {
            const scores = result.scores;

            let highestScore = 0;
            let mainClass = "";

            for (let i = 0; i < classLabels.length; i++) {
                const classPrediction = classLabels[i] + ": " + result.scores[i].toFixed(2);
                labelContainer.childNodes[i].innerHTML = classPrediction;

                if (result.scores[i] > highestScore) {
                    highestScore = result.scores[i];
                    mainClass = classLabels[i];
                }
            }

            mainSoundSource.innerHTML = "Main sound source: " + mainClass;

            // Log data every second
            const timestamp = new Date().toLocaleTimeString();
            csvData.push([timestamp, mainClass]);
        }, {
            includeSpectrogram: true,
            probabilityThreshold: 0.75,
            invokeCallbackOnNoiseAndUnknown: true,
            overlapFactor: 0.50
        });

        // Automatically stop and save the data every second
        setInterval(() => {
            recognizer.stopListening();
            recognizer.listen(result => {
                const scores = result.scores;
                let highestScore = 0;
                let mainClass = "";
                for (let i = 0; i < classLabels.length; i++) {
                    if (result.scores[i] > highestScore) {
                        highestScore = result.scores[i];
                        mainClass = classLabels[i];
                    }
                }
                const timestamp = new Date().toLocaleTimeString();
                csvData.push([timestamp, mainClass]);
            }, {
                includeSpectrogram: true,
                probabilityThreshold: 0.75,
                invokeCallbackOnNoiseAndUnknown: true,
                overlapFactor: 0.50
            });
        }, 1000); // Save data every second
    }

    // Function to download the CSV file
    function downloadCSV() {
        let csvContent = "data:text/csv;charset=utf-8," + csvData.map(e => e.join(",")).join("\n");
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        saveAs(blob, "main_sound_source_data.csv");
    }
</script>

</body>
</html>
